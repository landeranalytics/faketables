[{"path":"https://landeranalytics.github.io/faketables/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Lander Analytics Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"faketables","text":"vignette complete example shows use faketables components. vignette create shiny app allows us modify data dataset preview component faketables object. -depth example available .","code":""},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"faketables","text":"Load library. make sure things don’t get hand, first filter just first six rows. , want rownames column, sake example, convert qsec list column every row vector length two original value qsec subtracted added 1. select columns wish display.","code":"library(faketables) #>  #> Attaching package: 'faketables' #> The following object is masked from 'package:stats': #>  #>     update df <-   mtcars |>   head() |>   tibble::rownames_to_column() |>   dplyr::mutate('qsec' = purrr::map(.data$qsec, \\(x) round(c(x - 1, x + 1)))) |>   dplyr::select('rowname', 'mpg', 'cyl', 'qsec')"},{"path":[]},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"understanding-input_call","dir":"Articles","previous_headings":"Creating a faketable","what":"Understanding input_call()","title":"faketables","text":"faketables creates inputs dynamically, can’t work output function, rather needs work function . called “bare function”. input_call() requires bare function list args passed bare function. bare function usually takes form function call, without parenthesis arguments sum sum() function. Alternatively, function definition can passed. important match exactly, updated table contain rows. args list desired arguments normally passed function, except inputId. Even one supplied, ignored. can stored variable passed directly input argument col_def().","code":""},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"creating-a-col_def","dir":"Articles","previous_headings":"Creating a faketable","what":"Creating a col_def","title":"faketables","text":"First, need col_def column wish display. name c_def. col_def must name column created , input_call object, bare function call cast ensure column desired class, width. can also optional display_name. things note : label NULL input isn’t labelled row, doesn’t way. 'rowname' uses anonymous function wraps input shinyjs::disabled(). rowname column can rendered part table without users allowed modify value. 'qsec' uses anonymous function wraps actual casting function. qsec list column, still want ensure contents list match desired class.","code":"c_def <- list(   col_def(     name = 'rowname',     input = input_call(       fun = \\(...) { shinyjs::disabled(shiny::textInput(...)) },       args = list(label = NULL, placeholder = 'Vehicle Name')     ),     cast = as.character,     width = 3,     display_name = 'Vehicle Name'   ),   col_def(     name = 'mpg',     input = input_call(       fun = shiny::numericInput,       args = list(label = NULL)     ),     cast = as.numeric,     width = 2,     display_name = 'MPG'   ),   col_def(     name = 'cyl',     input = input_call(       fun = shiny::selectInput,       args = list(label = NULL, choices = c(4, 6, 8))     ),     cast = as.integer,     width = 2,     display_name = 'CYL'   ),   col_def(     name = 'qsec',     input = input_call(       fun = shiny::sliderInput,       args = list(label = NULL, min = 10, max = 25)     ),     cast = \\(x) purrr::map(x, as.numeric),     width = 3,     display_name = 'QSEC'   ) )"},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"creating-a-table_def","dir":"Articles","previous_headings":"Creating a faketable","what":"Creating a table_def","title":"faketables","text":"table_def , core, collection col_def objects neatly organized tibble. name t_def.","code":"t_def <- table_def(c_def)"},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"creating-a-faketable-1","dir":"Articles","previous_headings":"Creating a faketable","what":"Creating a faketable","title":"faketables","text":"last step creating faketable bring data table_def together. Since know rowname column unique, use rowId. also supply empty list delete buttons show row.","code":"f_tab <- faketable(df, t_def, rowId = 'rowname', show_delete = list())"},{"path":[]},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"creating-the-ui","dir":"Articles","previous_headings":"The Shiny App","what":"Creating the UI","title":"faketables","text":"UI relatively simple ’re just trying demonstrate faketable. First, use faketablesUI() make sure faketable rendered. create row inputs match col_def can input data press 'Add Row' button add row. bottom, radio button lets us switch faketable object tables preview.","code":"ui <- shiny::fluidPage(   title = 'mtcars',   shinyjs::useShinyjs(),   faketablesUI(),   shiny::tags$h3('Add Row'),   shiny::fluidRow(     shiny::column(       width = 2, shiny::actionButton('add_row', 'Add Row')     ),     shiny::column(       width = 3, shiny::textInput('rowname', 'Vehicle Name')     ),     shiny::column(       width = 2, shiny::textInput('mpg', 'MPG', value = 50)     ),     shiny::column(       width = 2, shiny::selectInput('cyl', 'CYL', c(4, 6, 8))     ),     shiny::column(       width = 3, shiny::sliderInput('qsec', 'QSEC', min = 10, max = 25, value = c(10, 25))     )   ),   shiny::tags$h3('Preview Table'),   shiny::radioButtons(     'preview',      label = 'Choose Table to Preview',      choices = c('x', 'inserted', 'updated', 'deleted'),     inline = TRUE   ),   shiny::tableOutput('preview_table') )"},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"creating-the-server","dir":"Articles","previous_headings":"The Shiny App","what":"Creating the Server","title":"faketables","text":"first thing call faketablesServer() faketable, f_tab, assign back f_tab. longer faketables object, shiny::reactive() holds faketables object. , order access faketable, now use f_tab() rather f_tab. reactive handle row updating deleting . order support inserting rows, need create event listener 'Add Row' button call faketablesInsert using now reactive f_tab new data want insert.","code":"server <- function(input, output, session) {   f_tab <- faketablesServer(faketable = f_tab)      # get the table referenced by the radio buttons   # `object@property_name` is the same as `prop(object, 'property_name')`   preview_table <- shiny::reactive({ S7::prop(f_tab(), input$preview) })   # use an un-exported function to ensure list columns render   output$preview_table <- shiny::renderTable(faketables:::.list_col_to_chr(preview_table()))      shiny::observe({     ins <- tibble::tibble(       'rowname' = input$rowname,       'mpg' = as.numeric(input$mpg),       'cyl' = as.numeric(input$cyl),       'qsec' = list(as.integer(input$qsec))     )     faketables::faketablesInsert(f_tab, ins)   }) |>     shiny::bindEvent(input$add_row) }"},{"path":"https://landeranalytics.github.io/faketables/articles/faketables.html","id":"running-the-app","dir":"Articles","previous_headings":"The Shiny App","what":"Running the app","title":"faketables","text":"","code":"shiny::shinyApp(ui, server)"},{"path":"https://landeranalytics.github.io/faketables/articles/favorite_pizza.html","id":"create-the-column-definitions-with-col_def","dir":"Articles","previous_headings":"","what":"Create the column definitions with col_def()","title":"Favorite Pizza Places","text":"","code":"c_def <- list(   faketables::col_def(     name = 'Name',     input = faketables::input_call(       fun = \\(...) { shinyjs::disabled(shiny::textInput(...)) },       args = list(label = NULL)     ),     cast = as.character,     width = 2   ),   faketables::col_def(     name = 'Address',     input = faketables::input_call(       fun = shiny::textInput,       args = list(label = NULL)     ),     cast = as.character,     width = 2   ),   faketables::col_def(     name = 'City',     input = faketables::input_call(       fun = shiny::selectInput,       args = list(         label = NULL,         choices = c('Bronx', 'Brooklyn', 'New York', 'Queens', 'Staten Island')       )     ),     cast = as.character,     width = 2   ),   faketables::col_def(     name = 'Zip',     input = faketables::input_call(       fun = shiny::numericInput,       args = list(label = NULL, min = 10001, max = 11697, step = 1)     ),     cast = as.integer,     width = 1   ),   faketables::col_def(     name = 'FavoritePizza',     input = faketables::input_call(       fun = shiny::textInput,       args = list(label = NULL)     ),     cast = as.character,     width = 2,     display_name = 'Favorite Pizza'   ),   faketables::col_def(     name = 'Rating',     input = faketables::input_call(       fun = shiny::sliderInput,       args = list(label = NULL, min = 11, max = 20)     ),     cast = as.integer,     width = 2   ) )"},{"path":"https://landeranalytics.github.io/faketables/articles/favorite_pizza.html","id":"create-the-table-definition-with-table_def","dir":"Articles","previous_headings":"","what":"Create the table definition with table_def()","title":"Favorite Pizza Places","text":"","code":"t_def <- faketables::table_def(c_def)"},{"path":"https://landeranalytics.github.io/faketables/articles/favorite_pizza.html","id":"get-data-and-create-the-faketable","dir":"Articles","previous_headings":"","what":"Get data and create the faketable","title":"Favorite Pizza Places","text":"","code":"pz <-   jsonlite::read_json(     path = 'https://www.jaredlander.com/data/FavoritePizzaPlaces.json',     simplifyVector = TRUE   ) |>   tibble::as_tibble() |>   tidyr::unnest(cols = c('Details', 'Coordinates')) |>   dplyr::mutate(     'Zip' = as.integer(.data$Zip),     'FavoritePizza' = 'Cheese',     'Rating' = 11L   ) |>   faketables::faketable(table_def = t_def, show_delete = list(width = 1))"},{"path":"https://landeranalytics.github.io/faketables/articles/favorite_pizza.html","id":"create-the-ui","dir":"Articles","previous_headings":"","what":"Create the UI","title":"Favorite Pizza Places","text":"","code":"ui <- bslib::page_navbar(   title = 'Favorite Pizza Places',   shinyjs::useShinyjs(),   bslib::nav_panel(     title = 'NYC',     bslib::layout_columns(       col_widths = c(4, 8),       min_height = '500px',       bslib::card(         bslib::card_header('Add Favorite'),         bslib::card_body(           shiny::fluidRow(             shiny::column(               width = 12,               shiny::fluidRow(                 shiny::column(                   width = 6,                   shiny::textInput('name', label = 'Name')                 ),                 shiny::column(                   width = 6,                   shiny::textInput('address', label = 'Address')                 )               ),               shiny::fluidRow(                 shiny::column(                   width = 6,                   shiny::selectInput(                     'city',                     label = 'City',                     choices = c('Bronx', 'Brooklyn', 'New York', 'Queens', 'Staten Island'),                     selected = 'New York')                 ),                 shiny::column(                   width = 6,                   shiny::numericInput(                     'zip',                     label = 'Zip',                     value = 10001,                     min = 10001,                     max = 11697,                     step = 1)                   )               ),               shiny::fluidRow(                 shiny::column(                   width = 6,                   shiny::textInput('latitude', label = 'Latitude')                 ),                 shiny::column(                   width = 6,                   shiny::textInput('longitude', label = 'Longitude')                 )               ),               shiny::fluidRow(                 shiny::column(                   width = 6,                   shiny::textInput('favoritePizza', label = 'Favorite Pizza')                 ),                 shiny::column(                   width = 6,                   shiny::sliderInput(                     'rating',                     label = 'Pizza Rating',                     min = 11,                     max = 20,                     value = 11)                 )               )             )           ),           shiny::fluidRow(             shiny::actionButton('add', label = 'Add Data')           )         )       ),       bslib::card(         full_screen = TRUE,         bslib::card_header('Map'),         bslib::card_body(           leaflet::leafletOutput(outputId = 'map'),         )       )     ),     bslib::card(       full_screen = TRUE,       bslib::card_header('Table'),       bslib::card_body(         faketables::faketablesUI()       )     )   ) ) #> Warning: Navigation containers expect a collection of #> `bslib::nav_panel()`/`shiny::tabPanel()`s and/or #> `bslib::nav_menu()`/`shiny::navbarMenu()`s. Consider using `header` or `footer` #> if you wish to place content above (or below) every panel's contents."},{"path":"https://landeranalytics.github.io/faketables/articles/favorite_pizza.html","id":"create-the-server","dir":"Articles","previous_headings":"","what":"Create the server","title":"Favorite Pizza Places","text":"","code":"server <- function(input, output, session) {   pz <- faketables::faketablesServer(faketable = pz)   output$map <-     leaflet::leaflet() |>     leaflet::addTiles() |>     leaflet::setView(-74.0060, 40.7128, 11) |>     leaflet::renderLeaflet()    shiny::observe({     ins <- tibble::tibble(       'Name' = input$name,       'Address' = input$address,       'City' = input$city,       'State' = 'NY',       'Zip' = as.integer(input$zip),       'latitude' = as.numeric(input$latitude),       'longitude' = as.numeric(input$longitude),       'FavoritePizza' = input$favoritePizza,       'Rating' = as.integer(input$rating)     ) |>       suppressWarnings()     if (any(is.na(unlist(ins)) | unlist(ins) == '')) {       shiny::showNotification(         'Something went wrong. Please validate your input data and try again.',         type = 'error'       )     } else {       faketables::faketablesInsert(pz, ins)     }   }) |>     shiny::bindEvent(input$add)    shiny::observe({     map_data <-       pz()@x |>       dplyr::mutate(         'label' = shiny::HTML(glue::glue('{.data$Name}<br>{.data$Address}, {.data$City}, NY, {.data$Zip}')),         .by = '.rowId'       ) |>       dplyr::mutate(         'fill_color' = dplyr::case_when(           .data$label == 'cheese' ~ '#FFCA45',           .default = '#FFCA45'         )       )     leaflet::leafletProxy('map', data = map_data) |>       leaflet::clearMarkers() |>       leaflet::addCircleMarkers(         lng = ~longitude,         lat = ~latitude,         radius = ~Rating + 4,         color = '#C9AA6E',         weight = 4,         opacity = 1,         fillColor = ~fill_color,         fillOpacity = 1,         label = ~label       )   }) |>     shiny::bindEvent(input$update, pz()) }"},{"path":"https://landeranalytics.github.io/faketables/articles/favorite_pizza.html","id":"run-the-app","dir":"Articles","previous_headings":"","what":"Run the app","title":"Favorite Pizza Places","text":"","code":"shiny::shinyApp(ui, server)"},{"path":"https://landeranalytics.github.io/faketables/articles/inserting_data.html","id":"insert","dir":"Articles","previous_headings":"","what":"insert()","title":"Inserting Data","text":"insert() use faketables object actual data insertion. called automatically faketablesServer() insert argument supplied data. Alternatively, faketables used outside Shiny context data history properties, can used safely add new data faketables object. Usage simply insert(faketable, new_data).","code":""},{"path":"https://landeranalytics.github.io/faketables/articles/inserting_data.html","id":"faketablesinsert","dir":"Articles","previous_headings":"","what":"faketablesInsert()","title":"Inserting Data","text":"faketablesInsert() use Shiny apps app developer wants new data added faketables object represented reactive object. Just like insert(), provided two arguments. latter new data inserted. However, unlike insert(), first argument faketables object, rather variable represents output faketablesServer() call. Usage little bit complex insert() requires two components. first server call assign faketablesServer() second call faketablesInsert new data actively added faketables object.","code":"f_tab <- faketables::faketable() server <- function(input, output, session) {   f_tab <- faketables::faketablesServer(f_tab)      shiny::observe({     faketables::faketablesInsert(f_tab, new_data)   }) |>     shiny::bindEvent(input$new_data_button) }"},{"path":"https://landeranalytics.github.io/faketables/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gus Lipkin. Maintainer, author. Lander Analytics. Copyright holder, funder.","code":""},{"path":"https://landeranalytics.github.io/faketables/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lipkin G (2024). faketables: Create table shiny inputs. R package version 0.1.0, https://landeranalytics.github.io/faketables/, https://github.com/landeranalytics/faketables.","code":"@Manual{,   title = {faketables: Create a table of shiny inputs},   author = {Gus Lipkin},   year = {2024},   note = {R package version 0.1.0, https://landeranalytics.github.io/faketables/},   url = {https://github.com/landeranalytics/faketables}, }"},{"path":[]},{"path":"https://landeranalytics.github.io/faketables/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create a table of shiny inputs","text":"faketables table construction tool creates renders tables using Shiny inputs, managing data inserts, updates, deletions. Users define column definitions using provided constructors pass data, faketables handles rest. faketables Shiny module, can used Shiny application excels applications users need interact data great detail.","code":""},{"path":"https://landeranalytics.github.io/faketables/index.html","id":"benefits","dir":"","previous_headings":"","what":"Benefits","title":"Create a table of shiny inputs","text":"faketables provides several distinct benefits packages similar features DT reactable: Users can implement Shiny input method wish cell faketables object contains entirety data shown user, along columns developer chosen hide user Information rows inserted, updated, deleted retained. , data stored entirety. setup can performed outside Shiny server context developers need two functions Shiny app, one UI one server, update delete functionality, third needed insertions.","code":""},{"path":"https://landeranalytics.github.io/faketables/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create a table of shiny inputs","text":"can install development version faketables GitHub :","code":"# install.packages(\"pak\") pak::pak(\"landeranalytics/faketables\")"},{"path":"https://landeranalytics.github.io/faketables/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create a table of shiny inputs","text":"Usage detailed Get Started Vignette example app best pizza NYC can found .","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/col_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a faketable column definition — col_def","title":"Create a faketable column definition — col_def","text":"Create faketable column definition","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/col_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a faketable column definition — col_def","text":"","code":"col_def(name, input_call, cast, width, display_name = name, ...)"},{"path":"https://landeranalytics.github.io/faketables/reference/col_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a faketable column definition — col_def","text":"name column name input_call input_call() object cast bare function call convert column intended class. important match exactly, updated table contain rows. width grid width column (must 1 12) display_name name use column header ... Elements include within column","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/col_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a faketable column definition — col_def","text":"col_def() object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/col_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a faketable column definition — col_def","text":"","code":"# to create a col_def for mtcars$mpg # it is a shiny::textInput that is disabled using shinyjs::disabled col_def(   name = 'mpg',   input = input_call(     fun = \\(...) { shinyjs::disabled(shiny::textInput(...)) },     args = list(label = NULL, placeholder = 'mpg')   ),   cast = as.numeric,   width = 3,   display_name = 'MPG' ) #> # A tibble: 1 × 5 #>   name  input_call cast   width display_name #> * <chr> <list>     <list> <dbl> <chr>        #> 1 mpg   <function> <fn>       3 MPG"},{"path":"https://landeranalytics.github.io/faketables/reference/delete_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and monitor a delete button — delete_button","title":"Create and monitor a delete button — delete_button","text":"functions used internally faketables","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/delete_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and monitor a delete button — delete_button","text":"","code":".delete_button(rowId, ...)  .create_delete_listener(ns = shiny::NS(NULL))"},{"path":"https://landeranalytics.github.io/faketables/reference/delete_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and monitor a delete button — delete_button","text":"rowId .rowId value corresponds row button displayed ... arguments pass shiny::column(). can include width. ns output call shiny::NS()","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/delete_button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and monitor a delete button — delete_button","text":"shiny::column() containing shiny::actionButton() allows users send delete request. HTML <head> tag button listener","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/delete_button.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create and monitor a delete button — delete_button","text":"delete button actually delete row data, creates button reports row user wishes delete. three components required use buttons. first placing .create_delete_listener() somewhere shiny app's ui. second calling .delete_button() create button inserting using shiny::insertUI(). third creating shiny event listener acts button presses monitoring input$table_btns.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/delete_button.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create and monitor a delete button — delete_button","text":"Joe Marlo","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/delete_button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and monitor a delete button — delete_button","text":"","code":"if (FALSE) { # this example creates a button for every row of `mtcars` # when the user presses a button, it will print the inputId of the button pressed shiny::shinyApp(   ui = shiny::tagList(     .create_delete_listener(), # add button listener     shiny::div(id = 'delete-buttons') # create div for buttons to be inserted   ),   server = \\(input, output, session) {     mtcars |>       tibble::rownames_to_column() |>       dplyr::pull(.data$rowname) |>       purrr::map_chr(digest::digest) |> # create row ids       purrr::walk(\\(x) {         shiny::insertUI( # insert delete button into ui           selector = '#delete-buttons',           where = 'afterBegin',           ui = shiny::fluidRow(.delete_button(x, list(width = 2)))         )       })      shiny::observe({      print(glue::glue('Button {input$table_btns} was pressed'))     }) |>      shiny::bindEvent(input$table_btns)   } ) }"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-better_rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind multiple data frames by row — .better_rbind","title":"Bind multiple data frames by row — .better_rbind","text":"Bind number data frames row, making longer result. similar .call(rbind, dfs), output contain columns appear inputs.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-better_rbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind multiple data frames by row — .better_rbind","text":"","code":".better_rbind(..., .id = NULL)"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-better_rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind multiple data frames by row — .better_rbind","text":"... Data frames combine. argument can either data frame, list data frame, list data frames. Columns matched name, missing columns filled NA. .id name optional identifier column. Provide string create output column identifies input. column use names available, otherwise use positions.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-better_rbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind multiple data frames by row — .better_rbind","text":"data frame type first element ....","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-better_rbind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind multiple data frames by row — .better_rbind","text":"Unlike dplyr::bind_rows(), .better_rbind() complain one data frame supplied.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-better_rbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind multiple data frames by row — .better_rbind","text":"","code":"if (FALSE) { .better_rbind(mtcars) .better_rbind(mtcars, mtcars, .id = 'id') }"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-create_rowid.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a .rowId column to a data frame — .create_rowid","title":"Add a .rowId column to a data frame — .create_rowid","text":"Add .rowId column data frame","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-create_rowid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a .rowId column to a data frame — .create_rowid","text":"","code":".create_rowid(x, rowId = NULL)"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-create_rowid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a .rowId column to a data frame — .create_rowid","text":"x data frame rowId name primary key column","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-create_rowid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a .rowId column to a data frame — .create_rowid","text":"x new column named .rowId column position one MD5 hash uniquely identifying row","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-create_rowid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a .rowId column to a data frame — .create_rowid","text":"","code":"if (FALSE) { .create_rowid(mtcars) mtcars |>   tibble::rownames_to_column() |>   .create_rowid(rowId = 'rowname') }"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-list_col_to_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list-type columns to character — .list_col_to_chr","title":"Convert list-type columns to character — .list_col_to_chr","text":"handy using shiny::renderTable() list type columns","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-list_col_to_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list-type columns to character — .list_col_to_chr","text":"","code":".list_col_to_chr(x)"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-list_col_to_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list-type columns to character — .list_col_to_chr","text":"x data frame","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-list_col_to_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list-type columns to character — .list_col_to_chr","text":"x, except list type columns now character","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-list_col_to_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert list-type columns to character — .list_col_to_chr","text":"","code":"if (FALSE) { df <- tibble::tibble('ls' = list('a', 'b'), 'num' = 1:2) .list_col_to_chr(df) }"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-reconstruct_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct a table from shiny inputs — .reconstruct_inputs","title":"Reconstruct a table from shiny inputs — .reconstruct_inputs","text":"Reconstruct table shiny inputs","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-reconstruct_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct a table from shiny inputs — .reconstruct_inputs","text":"","code":".reconstruct_inputs(faketable, input)"},{"path":"https://landeranalytics.github.io/faketables/reference/dot-reconstruct_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct a table from shiny inputs — .reconstruct_inputs","text":"faketable faketable() object input shiny server input","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-reconstruct_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct a table from shiny inputs — .reconstruct_inputs","text":"state faketable@x user sees UI","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/dot-reconstruct_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reconstruct a table from shiny inputs — .reconstruct_inputs","text":"used internally capture changes made data UI user. first captures input, filters input name inputs created table. reconstructed format matching faketable@x column class handling done user supplied cast function col_def().","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/faketable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a faketable object — faketable","title":"Create a faketable object — faketable","text":"Create faketable object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/faketable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a faketable object — faketable","text":"","code":"faketable(x, table_def, rowId = NULL, show_delete = NULL)"},{"path":"https://landeranalytics.github.io/faketables/reference/faketable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a faketable object — faketable","text":"x data.frame table_def table_def() object rowId character vector length one identifying column primary key, . show_delete named list passed shiny::column() holds Delete button. NULL, delete column shown.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/faketable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a faketable object — faketable","text":"faketable object following properties: x: current state table inputs inserted: Rows x inserted data (present .raw_data) updated: Rows x modified, present .raw_data deleted: Rows .raw_data, removed appear x .raw_data: data originally pased faketable() addition .rowId column first column. column calculated using hashing either provided rowId column using row number system time. .rowId: value rowId argument .deleted: rows removed x, including inserted deleted .table_def: copy user supplied table_def() passed argument table_def .show_delete: copy user supplied list passed argument show_delete","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/faketable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a faketable object — faketable","text":"faketable object S7::S7_object() class faketable. S7 object properties accessed using @, rather traditional $. example, property x faketable object called f_tab can accessed using f_tab@x.","code":""},{"path":[]},{"path":"https://landeranalytics.github.io/faketables/reference/faketables-package.html","id":null,"dir":"Reference","previous_headings":"","what":"faketables: Create a table of shiny inputs — faketables-package","title":"faketables: Create a table of shiny inputs — faketables-package","text":"Create interactive table shiny inputs providing data table definition.","code":""},{"path":[]},{"path":"https://landeranalytics.github.io/faketables/reference/faketables-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"faketables: Create a table of shiny inputs — faketables-package","text":"Maintainer: Gus Lipkin gus@landeranalytics.com contributors: Lander Analytics [copyright holder, funder]","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/input_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a faketable bare input call — input_call","title":"Create a faketable bare input call — input_call","text":"Create faketable bare input call","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/input_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a faketable bare input call — input_call","text":"","code":"input_call(fun, args)"},{"path":"https://landeranalytics.github.io/faketables/reference/input_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a faketable bare input call — input_call","text":"fun bare shiny input function args list named arguments pass fun. include inputId.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/input_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a faketable bare input call — input_call","text":"input_call() object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/input_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a faketable bare input call — input_call","text":"","code":"input_call(shiny::textInput, args = list(label = 'Text Input')) #> function (...)  #> { #>     rlang::eval_tidy(rlang::call_modify(rlang::call2(fun, !!!args),  #>         ..., .homonyms = \"last\")) #> } #> <bytecode: 0x563f967ced88> #> <environment: 0x563f990f4488> #> attr(,\"class\") #> [1] \"function\"   \"input_call\""},{"path":"https://landeranalytics.github.io/faketables/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert data into a faketable — faketablesInsert","title":"Insert data into a faketable — faketablesInsert","text":"Insert data faketable","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert data into a faketable — faketablesInsert","text":"","code":"faketablesInsert(reactive_faketable, x)"},{"path":"https://landeranalytics.github.io/faketables/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert data into a faketable — faketablesInsert","text":"reactive_faketable shiny::reactive object holds underlying faketable() x data.frame add data faketable() object. already primary key column specified table_def(), one created primary keys generated.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert data into a faketable — faketablesInsert","text":"faketablesInsert return, reassign faketable reactive object parent environment","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/methods.html","id":null,"dir":"Reference","previous_headings":"","what":"insert, update, or delete rows from a faketables object — methods","title":"insert, update, or delete rows from a faketables object — methods","text":"insert, update, delete rows faketables object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"insert, update, or delete rows from a faketables object — methods","text":"","code":"insert(f_tab, x)  update(f_tab, x)  delete(f_tab, x)"},{"path":"https://landeranalytics.github.io/faketables/reference/methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"insert, update, or delete rows from a faketables object — methods","text":"f_tab faketable() object x insert: data.frame add data faketable() object. already primary key column specified table_def(), one created primary keys generated. update: data.frame primary key column specified table_def() primary key values already present data. delete: Either character vector values primary key column specified table_def() data.frame rows remove vector column.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"insert, update, or delete rows from a faketables object — methods","text":"faketable() object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"insert, update, or delete rows from a faketables object — methods","text":"","code":"if (FALSE) { # insert # to insert new rows of data from a data.frame called `ins` f_tab <- faketablesServer(faketable = insert(f_tab(), ins))  # update # to update with a new column called 'new' that has the value 'new' faketable <- update(faketable, dplyr::mutate(faketable@x, 'new' = 'new'))  # delete # to delete the first six rows of the data where the primary key column is `rowId` rows_to_delete <- utils::head(faketable@x) faketable <- delete(faketable, rows_to_delete$.rowId) # OR faketable <- delete(faketable, rows_to_delete) }"},{"path":"https://landeranalytics.github.io/faketables/reference/render_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and render a faketables table header — .render_header","title":"Create and render a faketables table header — .render_header","text":"Create render faketables table header","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/render_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and render a faketables table header — .render_header","text":"","code":".render_header(f_tab)  .create_table_header(f_tab)"},{"path":"https://landeranalytics.github.io/faketables/reference/render_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and render a faketables table header — .render_header","text":"f_tab faketable() object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/render_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and render a faketables table header — .render_header","text":"NULL shiny::fluidRow() containing display names f_tab's table_def() rendered shiny::column()","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/render_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and render a faketables table body — .render_table","title":"Create and render a faketables table body — .render_table","text":"output passed shiny::renderUI() server","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/render_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and render a faketables table body — .render_table","text":"","code":".render_table(f_tab, ns)  .create_table_body(f_tab, ns)"},{"path":"https://landeranalytics.github.io/faketables/reference/render_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and render a faketables table body — .render_table","text":"f_tab faketable() object ns session namespace shiny::NS()session$ns","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/render_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and render a faketables table body — .render_table","text":"shiny::fluidRow() containing shiny::column() column specified f_tab's table_def()","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the shiny components required to use faketables — shiny","title":"Create the shiny components required to use faketables — shiny","text":"Create shiny components required use faketables","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the shiny components required to use faketables — shiny","text":"","code":"faketablesUI(id = \"faketables\")  faketablesServer(id = \"faketables\", faketable, insert = NULL)"},{"path":"https://landeranalytics.github.io/faketables/reference/shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the shiny components required to use faketables — shiny","text":"id ID string used identify module UI faketable faketable() object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the shiny components required to use faketables — shiny","text":"faketablesUI: shiny::shinyApp() ui faketablesServer: shiny::reactive() object represents passed faketable() object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/table_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a faketable table definition — table_def","title":"Create a faketable table definition — table_def","text":"Create faketable table definition","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/table_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a faketable table definition — table_def","text":"","code":"table_def(...)"},{"path":"https://landeranalytics.github.io/faketables/reference/table_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a faketable table definition — table_def","text":"... least one col_def() object. columns definition displayed. column definition rows added, column without definition receive NA value.","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/table_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a faketable table definition — table_def","text":"table_def() object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/table_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a faketable table definition — table_def","text":"","code":"# to create a table_def to display mtcars$mpg # see faketables::col_def() for more information table_def(  col_def(    name = 'mpg',    input = input_call(      fun = \\(...) { shinyjs::disabled(shiny::textInput(...)) },      args = list(label = NULL, placeholder = 'mpg')    ),    cast = as.numeric,    width = 3,    display_name = 'MPG'  ) ) #> # A tibble: 1 × 5 #>   name  input_call cast   width display_name #> * <chr> <list>     <list> <dbl> <chr>        #> 1 mpg   <function> <fn>       3 MPG"},{"path":"https://landeranalytics.github.io/faketables/reference/validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is the correct class — validation","title":"Check if an object is the correct class — validation","text":"Check object correct class","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is the correct class — validation","text":"","code":"is_input_call(x)  is_col_def(x)  is_table_def(x)  is_faketable(x)"},{"path":"https://landeranalytics.github.io/faketables/reference/validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is the correct class — validation","text":"x object","code":""},{"path":"https://landeranalytics.github.io/faketables/reference/validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is the correct class — validation","text":"logical indication whether x belongs given class","code":""}]
