% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/delete.R
\name{delete_button}
\alias{delete_button}
\alias{.delete_button}
\alias{.create_delete_listener}
\title{Create and monitor a delete button}
\usage{
.delete_button(
  rowId,
  ...,
  .delete_style = "background: #bf5959; color: #fff; border: none; width: 100\%",
  .delete_label = "Delete"
)

.create_delete_listener(ns = shiny::NS(NULL))
}
\arguments{
\item{rowId}{The \code{.rowId} value that corresponds to the row where the button
will be displayed}

\item{...}{Further arguments to pass to \code{\link[shiny:column]{shiny::column()}}. This can include
\code{width}. If not provided, width will default to \code{2}.}

\item{.delete_style}{The CSS style for the delete button}

\item{.delete_label}{The label for the delete button}

\item{ns}{The output of a call to \code{\link[shiny:NS]{shiny::NS()}}}
}
\value{
A \code{\link[shiny:column]{shiny::column()}} containing a \code{\link[shiny:actionButton]{shiny::actionButton()}} that allows
users to send a delete request.

An HTML \verb{<head>} tag with the button listener
}
\description{
These functions are used internally in \code{faketables}
}
\details{
The delete button itself does not actually delete a row from the
data, this only creates a button that reports which row a user wishes to
delete.

There are three components required to use the buttons. The first is
placing \code{.create_delete_listener()} somewhere in the shiny app's ui. The
second is calling \code{.delete_button()} to create the button and then
inserting it using \code{\link[shiny:insertUI]{shiny::insertUI()}}. The third is creating a shiny event
listener that acts on the button presses by monitoring \code{input$table_btns}.
}
\examples{
if (interactive()) {
# this example creates a button for every row of `mtcars`
# when the user presses a button, it will print the inputId of the button pressed
shiny::shinyApp(
  ui = shiny::tagList(
    .create_delete_listener(), # add button listener
    shiny::div(id = 'delete-buttons') # create div for buttons to be inserted
  ),
  server = \(input, output, session) {
    mtcars |>
      tibble::rownames_to_column() |>
      dplyr::pull(.data$rowname) |>
      purrr::map_chr(digest::digest) |> # create row ids
      purrr::walk(\(x) {
        shiny::insertUI( # insert delete button into ui
          selector = '#delete-buttons',
          where = 'afterBegin',
          ui = shiny::fluidRow(.delete_button(x, list(width = 2)))
        )
      })

    shiny::observe({
     print(glue::glue('Button {input$table_btns} was pressed'))
    }) |>
     shiny::bindEvent(input$table_btns)
  }
)
}

}
\author{
Joe Marlo
}
\keyword{internal}
